<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Movement &amp; Input Variables

    up=noone;
    down=noone;
    left=noone;
    right=noone;
    focus=noone;
    shoot1=noone;
    bomb=noone;
    shoot_press=noone;
    bomb_press=noone;
    esc=noone;

// Analog Variables
    up1=false;
    down1=false;
    left1=false;
    right1=false;
    destx = 0;
    desty = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Alt F4 - Quit
if (keyboard_check(vk_alt)) &amp;&amp; (keyboard_check(vk_f4)){
    scr_save();
    game_end();
}

/*
Sets if "pressed" or "released"
It's like this for the replay system, I know it sucks
*/

// Resets Variables

up=noone;
down=noone;
left=noone;
right=noone;
focus=noone;
bomb_press=noone;
shoot_press=noone;
esc=noone;

if !global.term{
    // Keyboard Start!
    // Movement
    if keyboard_check_pressed(vk_anykey) || keyboard_check_released(vk_anykey){
        if keyboard_check_pressed(global.Up) {up=true;}
            if keyboard_check_released(global.Up) {up=false;}
        if keyboard_check_pressed(global.Down) {down=true;}
            if keyboard_check_released(global.Down) {down=false;}
        if keyboard_check_pressed(global.Left) {left=true;}
            if keyboard_check_released(global.Left) {left=false;}
        if keyboard_check_pressed(global.Right) {right=true;}
            if keyboard_check_released(global.Right) {right=false;}
        if keyboard_check_pressed(global.Focus) {focus=true;}
            if keyboard_check_released(global.Focus) {focus=false;}
        // Bomb, Shoot &amp; Esc
        if keyboard_check_pressed(global.Bomb) {bomb_press=true;}
            if keyboard_check_released(global.Bomb) {bomb_press=false;}
        if keyboard_check_pressed(global.Shoot) {shoot_press=true;}
            if keyboard_check_released(global.Shoot){shoot_press=false;}
        if keyboard_check_pressed(vk_escape) {esc=true;}
            if keyboard_check_released(vk_escape){esc=false;}
    }
    // Keyboard End
    
    // Game Pad Start!
    var gp_num = gamepad_get_device_count();
    for (var i = 0; i &lt; gp_num; i++;){
        if gamepad_is_connected(i){
            // Movement
            // Analog Sticks
            gamepad_set_axis_deadzone(i, 0.5);
            var LVaxis = gamepad_axis_value(i, gp_axislv);
            if LVaxis &lt; 0 &amp;&amp; up1 == false {up=true; up1=true;}
            if LVaxis &gt; 0 &amp;&amp; down1 == false {down=true; down1=true;}
            if LVaxis = 0 &amp;&amp; (up1 || down1)
                {up1=false; down1=false; up=false; down=false;}
            var LHaxis = gamepad_axis_value(i, gp_axislh);
            if LHaxis &lt; 0 &amp;&amp; left1 == false {left=true; left1=true;}
            if LHaxis &gt; 0 &amp;&amp; right1 == false {right=true; right1=true;}
            if LHaxis = 0 &amp;&amp; (left1 || right1)
                {left1=false; right1=false; left=false; right=false;}
            // Buttons
            if gamepad_button_check_pressed(i,gp_padu) {up=true;}
                if gamepad_button_check_released(i,gp_padu) {up=false;}
            if gamepad_button_check_pressed(i,gp_padd) {down=true;}
                if gamepad_button_check_released(i,gp_padd) {down=false;}
            if gamepad_button_check_pressed(i,gp_padl) {left=true;}
                if gamepad_button_check_released(i,gp_padl) {left=false;}
            if gamepad_button_check_pressed(i,gp_padr) {right=true;}
                if gamepad_button_check_released(i,gp_padr) {right=false;}
            if gamepad_button_check_pressed(i,gp_shoulderr) {focus=true;}
                if gamepad_button_check_released(i,gp_shoulderr) {focus=false;}
            // Bomb, Shoot &amp; Esc
            if gamepad_button_check_pressed(i,gp_face2) {bomb_press=true;}
                if gamepad_button_check_released(i,gp_face2) {bomb_press=false;}
            if gamepad_button_check_pressed(i,gp_face1) {shoot_press=true;}
                if gamepad_button_check_released(i,gp_face1){shoot_press=false;}
            if gamepad_button_check_pressed(i,gp_start) {esc=true;}
                if gamepad_button_check_released(i,gp_start){esc=false;}
        }
    }
}
// Game Pad End
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
