<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>6</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>num = instance_number(obj_Plaser_0);

draw = false;
end_x = noone;
end_y = noone;
direction = 90;

d = 0;
prev = instance_number(obj_Plaser_0);
max_length = 0;

// Fader
t = 0;
alpha = t / 10;

fd_in = 20;

impact_part_flicker = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.pause == 0{

if global.pow &lt; num{
    instance_destroy();
    exit;
}

// Set position and direction
x = orb.x;
y = orb.y;
dir0 = 90;
// Homing on enemys
dir1 = noone;
if !global.shift{
    global.laserdmg = 0.75;
    impact_part_flicker++;
    if impact_part_flicker &gt; 3{
        impact_part_flicker = 0;
    }
    var rnd_part_chance = 3;
    var inst = instance_nearest(x, y, obj_enemy);
    if inst != noone{
        enemy_x = inst.x;
        enemy_y = inst.y;
        dir1 = point_direction(x, y, enemy_x, enemy_y);
    }
}else{
    global.laserdmg = 1.5;
    impact_part_flicker = 0;
    var rnd_part_chance = 1;
}

if dir1 == noone{
    var turn0 = angle_difference(direction, dir0);
    turn_speed = 10;
}else{
    var turn0 = angle_difference(direction, dir1);
    turn_speed = 5;
}
turn0 = turn0/turn_speed;
direction -= turn0;

// Collision/Length checker
if instance_exists(global.player){
    if (!global.player.shoot_press || global.in_dialog) &amp;&amp; t &gt; 0{
        t -= 1;
    }else if global.player.shoot_press &amp;&amp; t &lt; fd_in{
        t += 1;
    }
    if t == 0{
        max_length = 0;
        d = 0;
    }else{
        if max_length &lt; 600{
            max_length += 600/60;
        }
    }
    alpha = t / fd_in;
    
    if alpha &gt; 0.1{
        d -= 20; // For color
        draw = true;
        if direction &gt; 270 || direction &lt; 90{
            end_x = global.xview;
        }else{
            end_x = 0;
        }
        if direction &gt; 180{
            end_y = global.yview;
        }else{
            end_y = 0;
        }
        var end_dist = min(point_distance(x, y, end_x, end_y), max_length);
        var x1 = x;
        var y1 = y;
        var x2 = x;
        var y2 = y;
        var i = false;
        while !i{
            if instance_exists(obj_enemy){
                inst = instance_nearest(x1, y1, obj_enemy);
                if point_distance(x1, y1, inst.x, inst.y) &lt; 25 + inst.hitbox{
                    for(o = 0; o &lt; 99; o += 5;){
                        inst = instance_nearest(x1, y1, obj_enemy);
                        if point_distance(x1, y1, inst.x, inst.y) &lt; inst.hitbox{
                            inst.laser_hit++;
                            hit_enemy = true;
                            o = 99;
                            i = true;
                            end_x = x1;
                            end_y = y1;
                            max_length = point_distance(x, y, x1, y1);
                            if impact_part_flicker == 0{
                                // Impact particle
                                part_particles_create_colour(global.Psys, end_x, end_y, global.part_mlaser, make_colour_rgb(255, 255, 255), 1);
                            }
                        }else{
                            if point_distance(x, y, x1, y1) &lt; end_dist{
                                x1 += lengthdir_x(10, direction);
                                y1 += lengthdir_y(10, direction);
                            }else{
                                o = 99;
                                end_x = x1;
                                end_y = y1;
                            }
                        }
                    }
                }
            }
            if irandom(9*rnd_part_chance) == 0{
                // Particles spawning down the beam
                var rnd_col = choose(c_red, make_colour_rgb(255, 215, 0), c_silver);
                part_particles_create_colour(global.Psys, x1, y1, global.part_mlaz, rnd_col, 1);
            }
            if point_distance(x, y, x1, y1) &lt; end_dist{
                x1 += lengthdir_x(25, direction);
                y1 += lengthdir_y(25, direction);
            }else{
                i = true;
                end_x = x1;
                end_y = y1;
            }
        }
        x1 = x;
        y1 = y;
    }else{
        draw = false;
    }
}

// Sync colors of lines when powering up
if prev != instance_number(obj_Plaser_0){
    d = 0;
    t = 0;
    ytop1 = 0;
}
prev = instance_number(obj_Plaser_0);

orb.image_angle = direction-90;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var d1 = d;
if draw == true{
    var dist = distance_to_point(end_x, end_y);
    if global.shift{
        var laser_width = 1;
        var focus_alpha = 0.75;
    }else{
        var laser_width = 0.6;
        var focus_alpha = 0.6;
    }
    for(var o = 1; o &lt;= dist; o += 10){
        var xd = x + lengthdir_x(o, direction);
        var yd = y + lengthdir_y(o, direction);
        d1 += 30;
        var thk = lengthdir_y(0.3 * laser_width, d1);
        var col0 = lengthdir_y(64, d1) + 64;
        var col1 = lengthdir_y(96, d1) + 96;
        draw_sprite_ext(spr_Plaser_0, 0, xd, yd, laser_width +thk, 2, direction + 90, make_colour_rgb(255, col1, col0), (alpha * 0.75) * focus_alpha);
        draw_sprite_ext(spr_Plaser_0, 0, xd, yd, laser_width/2 +(thk/2), 2, direction + 90, image_blend, alpha * focus_alpha);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
