<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Random seed setting for replay system.

    random_set_seed(0); //Random seet set
    global.seed = 0;

// Global Variables

    global.pause=0; // Paused = 1, Unpaused = 0
    global.stage=0; // Stage number you're on
    global.in_dialog=false; // True if the player is in a dialog scene
    global.game_over=false; // Game Over condition
    global.win=false; // False until player wins, triggers score screen
    global.clear=false; // Clears the screen of danmaku
    global.star=false; // Sets if stars spawn when screen is cleared
    global.point=0; // Amount of point items collected
    global.graze=0; // Graze counter
    global.orb_gcd=0; // GCD for the players orb danmaku
    global.player_death=false; // For death event
    global.collect=false; // For collecting power ups at the top of the screen
    global.bomb=false; // True if the player is currently bombing
    global.grazeSlow=0; // Counter to slow point items when player Grazes
    global.shift=false; // If player is holding focus or not
    global.gamespeed=1; // For slow motion
    global.item_get_height = 130; // Item collect height
    global.replay_save_state = false; // Save state before bosses
    
    global.trail_draw = false;
    global.trail_duration = 0;
    
    global.shake_screen = false;
    
// Misc

    scr_particles(); // Sets particle types
    scr_music_stop(); // Stops all music
    dead=false; // True when you die, lets timer start to end game.
    deadTimer=30; // Starts counting if dead == true
    delay=10; // Number of delay frames when pausing
    temp_graze=0; // For graze sound
    global.god=false;
    
    // Clear Score
    if !global.replay{
        global.score = 0;
    }

// Current Timer for level events (Needs an overhaul)

    global.seconds=0;
    global.frame=0;

// For resetting global.clear

    clear_reset=false;

// Creates Game Objects (IMPORTANT!!)

    action_create_object(obj_player, 0,0); // Player!
    action_create_object(obj_interface,0,0);
    action_create_object(obj_draw_start,0,0);
    action_create_object(obj_drawBG,0,0);
    action_create_object(obj_draw_shots,0,0);
    action_create_object(obj_draw_end,0,0);
    action_create_object(global.level,0,0);

// Creates the replay recorder object

    if global.replay == false &amp;&amp; !instance_exists(obj_replay_recorder) {
        action_create_object(obj_replay_recorder,0,0);
    }
    if global.demo_play == true {
        action_create_object(obj_demo_play,0,0);
    }

// Stops menu music playing unless is demo mode

    if global.demo_play == false {
        audio_stop_sound(bgm_menu);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.pause == 0 &amp;&amp; delay == 0 &amp;&amp; global.demo_play == false
{
    if global.replay{
        if global.rpllength &lt;= global.frame &amp;&amp; global.pause == 0{
            global.pause = 1;
            instance_create(264, 300, obj_replay_end);
            part_system_automatic_update(global.Psys, false);
        }
        if input.esc &amp;&amp; global.pause == 0{
            global.pause = 1;
            instance_create(264, 300, obj_replay_pause);
            part_system_automatic_update(global.Psys, false);
        }
    }else{
        if global.game_over &amp;&amp; global.pause == 0{
            global.pause = 1;
            instance_create(264, 300, obj_gameover);
            part_system_automatic_update(global.Psys, false);
        }
        if input.esc &amp;&amp; global.pause == 0{
            global.pause = 1;
            instance_create(264, 300, obj_pause_menu);
            part_system_automatic_update(global.Psys, false);
        }
    }
}

// Win &amp; show Score Screen
if global.win == true &amp;&amp; global.pause == 0
{
    global.pause = 1;
    instance_create(264, 300, obj_score_screen);
    part_system_automatic_update(global.Psys, false);
}


if global.pause == 0 // Pre step event unpaused happenings
{
     // Frame Counter
    global.frame++;
    global.seed = global.frame;
    
    // Set random seed
    random_set_seed(global.seed);
    
    // Second counter
    global.seconds += 0.01;
    if frac(global.seconds) == 0.60
    {
        global.seconds=round(global.seconds);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Dev Tools
if global.debug &amp;&amp; !global.term
{
    if keyboard_check_pressed(vk_subtract)
    {
        global.pow -= 1;
        if global.pow &lt; 1{
            global.pow = 1;
        }
    }
    if keyboard_check_pressed(vk_add)
    {
        global.pow += 1;
        if global.pow &gt; global.max_power{
            global.pow = global.max_power;
        }
    }
    if keyboard_check_pressed(ord("8"))
    {
        global.seconds = 42;
        global.pow = 4;
    }
    if keyboard_check_pressed(ord("0"))
    {
        global.life = 8;
        global.bombs = 8;
        global.pow = 6;
    }
    if keyboard_check_pressed(vk_tab) || gamepad_button_check_pressed(0,gp_select)
    {
        room_speed = 3000;
    }
    if keyboard_check_released(vk_tab) || gamepad_button_check_released(0,gp_select)
    {
        room_speed = 60;
    }
    if keyboard_check_pressed(vk_add)
    {
        if instance_exists(obj_boss_parent)
            {obj_boss_parent.hp = -1;}
    }
    // GOD MODE!
    if keyboard_check_pressed(ord("9"))
    {
        global.god = !global.god;
    }
    if global.god
    {
        global.player_death = false;
    }
}

// Only if unpaused stuff
if !global.pause{
    if delay &gt; 0
        {delay -= 1;}
    
    // Game Over
    if global.life == -1
    {
        deadTimer -= 1;
        if global.continues == 0{
            if instance_exists(global.player)
            {
                with global.player
                {
                    instance_destroy();
                }
            }
        }
    }
    
    if deadTimer &lt;= 0
    {
        global.game_over = true;
    }
    
    // Graze Slow
    if global.grazeSlow &gt; 0
    {
        global.grazeSlow -= 1;
    }
    
    // Clear Reset
    if clear_reset==true
    {
        global.clear=false;
        clear_reset=false;
    }
    if global.clear==true
    {
        clear_reset=true;
    }
}

if global.graze != temp_graze
{
    audio_play_sound(sfx_graze,1,false);
}
temp_graze = global.graze;

// Kill when going back to Main Menu
if room != room_ingame{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
