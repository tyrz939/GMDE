<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_char_dot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Start Values

    diag_y=0; // For Diagonal Y Check
    diag_x=0; // For Diagonal X Check
    wep_gcd=0; // Weapon GCD counter
    spawn1=true; // ??
    spawn2=true; // ??
    spawn3=true; // ??
    spawn4=true; // ??
    respawn=120; // Respawn timer
    death_bomb_timer=-1; //
    global.player = id;
    cur_stage = 0;
    at_max = false;

// Movement &amp; Input Variables

    up=false;
    down=false;
    left=false;
    right=false;
    focus=false;
    shoot1=false;
    bomb=false;
    shoot_press=false;
    bomb_press=false;

// Replay Loader

    if global.replay==true{
        replay_load_binary();
        frames=0;
    }

// Spawn Position

    start_counter = 0;
    x = global.player_x;
    y = global.player_y;
    xstart = x;
    ystart = 520;

// Character Values
    
    scr_player_select(global.char);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// LOAD STATE
if global.replay &amp;&amp; !global.pause &amp;&amp; load_state == true{
    load_state = false;
    
    with global.level{
        instance_destroy();
    }

    // Set variables
    var l = global.replay_load_spot;
    global.player_x = state[0, l];
    global.player_y = state[1, l];
    global.life = state[2, l];
    global.bombs = state[3, l];
    global.pow = state[4, l];
    global.frame = state[5, l];
    global.level = state[7, l];
    instance_create(0,0,global.level);
    global.seconds = state[6, l];
    global.levelpos = state[8, l];
    global.score = state[9, l];
    wep_gcd = state[10, l];
    global.graze = state[11, l];
    global.point = state[12, l];
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    /*==========================
    Input from player or replay
    ==========================*/
if global.replay == false{
    // Player input
    if input.up == true {up=true;}
    else if input.up == false {up=false;}
    
    if input.down == true {down=true;}
    else if input.down == false {down=false;}
    
    if input.left == true {left=true;}
    else if input.left == false {left=false;}
    
    if input.right == true {right=true;}
    else if input.right == false {right=false;}
    
    if input.focus == true {focus=true;}
    else if input.focus == false {focus=false;}
    
    if input.bomb_press == true {bomb_press=true;}
    else if input.bomb_press == false {bomb_press=false;}
    
    if input.shoot_press == true {shoot_press=true;}
    else if input.shoot_press == false {shoot_press=false;}
}else{
    // Replay Input
    while replay[FRAME,pos] &lt; global.frame &amp;&amp; pos &lt; replay_length{
        pos++;
    }
    if global.frame == replay[FRAME,pos]{
        if replay[UP,pos]==1 {up=true;}
        else if replay[UP,pos]==0 {up=false;}
        
        if replay[DOWN,pos]==1 {down=true;}
        else if replay[DOWN,pos]==0 {down=false;}
        
        if replay[LEFT,pos]==1 {left=true;}
        else if replay[LEFT,pos]==0 {left=false;}
        
        if replay[RIGHT,pos]==1 {right=true;}
        else if replay[RIGHT,pos]==0 {right=false;}
        
        if replay[FOCUS,pos]==1 {focus=true;}
        else if replay[FOCUS,pos]==0 {focus=false;}
        
        if replay[SHOOT,pos]==1 {shoot_press=true;}
        else if replay[SHOOT,pos]==0 {shoot_press=false;}
        
        if replay[BOMB,pos]==1 {bomb_press=true;}
        else if replay[BOMB,pos]==0 {bomb_press=false;}
    }
}

if !global.pause &amp;&amp; global.life &gt;= 0 // Pause thingy
{
    direction += 45;
    image_angle = direction;
    
    /*==========================
    MOVEMENT SPEED FILTER SYSTEM
    ==========================*/
    
    // Round X,Y before saving replay.
    if cur_stage != global.stage || global.replay_save_state {
        cur_stage = global.stage
        global.player_x = round(global.player_x);
        global.player_y = round(global.player_y);
        global.graze = round(global.graze);
        if global.replay{
            global.replay_save_state = false;
        }
    }else if start_counter == 0{
        // Diag speed normalizer
        
        if up==true xor down==true{
            diag_y=1;
        }else{
            diag_y=0;
        }
        if left==true xor right==true{
            diag_x=1;
        }else{
            diag_x=0;
        }
        
        // Focus slow down, move1 is focus speed
        
        if focus==true{
            move1=2;
            visible=1;
            global.shift=true;
        }else{
            move1=move2;
            visible=0;
            global.shift=false;
        }
        
        // Diag speed normalizer 2
        
        if diag_y+diag_x==2{
            move=move1*(sqrt(0.5));
        }else{
            move=move1;
        }
        
        // Bomb Slow
        
        if global.bomb == true{
            move *= bombSpdPen;
        }
            
        // Player Movement
        
        if left == true &amp;&amp; global.player_x &gt; 15{
            global.player_x -= move * global.gamespeed;
            obj_player_sprite.left=true;
        }else{
            obj_player_sprite.left=false;
        }
        
        if right == true &amp;&amp; global.player_x &lt; global.xview - 15{
            global.player_x += move * global.gamespeed;
            obj_player_sprite.right=true;
        }else{
            obj_player_sprite.right=false;
        }
        
        if up == true &amp;&amp; global.player_y &gt; 20{
            global.player_y -= move * global.gamespeed;
        }
        if down == true &amp;&amp; global.player_y &lt; global.yview - 20{
            global.player_y += move * global.gamespeed;
        }
    }else{
        start_counter -= 1;
        global.player_y -= 2;
    }
    
    x = global.player_x;
    y = global.player_y;

    /*========================
        ORBS AND SHOOTING
    ========================*/
    
    // Spawn Orbs
    if global.pow &gt;= global.max_power &amp;&amp; at_max == false{
        global.pow = global.max_power;
        instance_create(0,0, obj_full_power_text);
        audio_play_sound(sfx_full_power,1,false);
        global.clear = true;
        with instance_create(x,y,obj_Pup_text){
            text = "MAX";
            col = c_yellow;
        }
    }
    if global.pow &gt;= global.max_power{
        at_max = true;
    }else{
        at_max = false;
    }
    while instance_number(obj_char_orbs) &lt; floor(global.pow){
        instance_create(x,y, obj_char_orbs);
    }

    // Player Main Weapon
    if wep_gcd &gt; 0{
        wep_gcd--; // Weapon GCD Counter
    }
    
    if global.orb_gcd&gt;0{
        global.orb_gcd--; // Orb shot GCD Counter (GCD set in script)
    }
    
    if wep_gcd == 0 &amp;&amp; shoot_press == true &amp;&amp; global.in_dialog == false &amp;&amp; start_counter == 0{
        script_execute(shot_script);
        wep_gcd = 4;
        audio_stop_sound(sfx_Pshot1);
        audio_play_sound(sfx_Pshot1,1,false);
    }
        
    // Bomb
    if bomb_press == true &amp;&amp; global.bomb == false &amp;&amp; global.bombs &gt; 0 &amp;&amp; global.in_dialog == false &amp;&amp; start_counter == 0{
        instance_create(x, y, bomb_object); // Bomb
        global.bomb=true;
        global.bombs-=1;
    }
    
    if global.bomb == true{
        global.player_death = false; // God mode while bombing
    }
    
    // Item Auto Collet
    if y &lt; global.item_get_height{
        global.collect = true;
    }else{
        global.collect = false;
    }
        
    /*==========================
        DEATH AND RESPAWN
    ==========================*/
    
    // Respawn Safety Count Down
    if respawn &gt;= 1
    {
        respawn-=1;
        global.player_death=false;
    }
    if death_bomb_timer&gt;=0{
        // Death Bomb Count Down
        death_bomb_timer-=1;
    }
    // Death Checker
    if global.player_death == true &amp;&amp; global.life &gt;= -1 &amp;&amp; respawn == 0 &amp;&amp; death_bomb_timer &lt; 0{
        death_bomb_timer = 6;  // Death Bombing Timer set
        audio_play_sound(sfx_death,1,false);
    }
    
    if death_bomb_timer == 0 &amp;&amp; global.bomb == false{
        // Spawn power-ups above death location
        if global.pow &gt; 1{
            for(var i = 1; i &lt; 10; i++){
                var xs = x + lengthdir_x(75,30 + (i*12));
                var ys = y + lengthdir_y(75,30 + (i*12));
                instance_create(xs,ys,obj_power_block);
            }
        }
        global.player_death = false;
        obj_player_sprite.respawn = true; // Respawn safty Timer set
        respawn = 180;
        start_counter = 60;
        global.life -= 1;
        global.pow -= 1;
        if global.pow &lt; 1
            {global.pow = 1;}
        global.bombs = 3;
        global.clear = true; // Clears screen on death
        global.star = false;
        global.player_x = xstart;
        global.player_y = ystart;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.life &gt;= 0{
    if global.shift=true{
        draw_set_alpha(1);
        draw_self();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>9,10</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
