<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Size of image is checked and drawn full screen dynamically.

//h_res = sprite_get_width(spr_interface1);
//v_res = sprite_get_height(spr_interface1);
x = 0;
y = 0;

w = 640;
h = 480;

// Line around play area
o = -1; // Boarder Offset
width = 1; // Boarder Width
L = global.xvstart;
R = global.xvstart + global.xview;
T = global.yvstart;
B = global.yvstart + global.yview;

// Loads previous High Scores
switch global.difficulty{
    case 0: hiscore=global.highscore0; break;
    case 1: hiscore=global.highscore1; break;
    case 2: hiscore=global.highscore2; break;
    case 3: hiscore=global.highscore3; break;
}
    
// Color for Score/High Score text
switch global.difficulty{
    case 0: score_col = make_colour_rgb(150,255,150); break;
    case 1: score_col = make_colour_rgb(150,150,255); break;
    case 2: score_col = make_colour_rgb(255,150,150); break;
    case 3: score_col = make_colour_rgb(220,150,255); break;
}

// Misc
HSupdate=false; // True when score &gt; high score
player=0; // For drawing lifes left
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Line around play area
display_set_gui_size(w,h);
//draw_set_alpha(1);
//draw_sprite(spr_interface1,0,0,0);

draw_set_color(make_colour_rgb(255,0,0));



draw_line_width_colour(L + o,T + o,R + o,T + o, width, make_colour_rgb(150,0,0), make_colour_rgb(150,0,0)); // TOP
draw_line_width_colour(L + o,T + o,L + o,B + o, width, make_colour_rgb(150,0,0), make_colour_rgb(50,0,0)); // LEFT
draw_line_width_colour(R + o,T + o,R + o,B + o, width, make_colour_rgb(150,0,0), make_colour_rgb(50,0,0)); // RIGHT
draw_line_width_colour(L + o,B + o,R + o,B + o, width, make_colour_rgb(50,0,0), make_colour_rgb(50,0,0)); // BOTTOM
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game Interface
// Config stuffs
var i;
var anchX, anchY;
display_set_gui_size(1280,960);
draw_set_alpha(1);

// Draw High Score &amp; Score
if global.score &gt; hiscore &amp;&amp; !global.replay{
    hiscore = global.score;
    HSupdate = true;
    switch global.difficulty{
        case 0: global.highscore0 = global.score; break;
        case 1: global.highscore1 = global.score; break;
        case 2: global.highscore2 = global.score; break;
        case 3: global.highscore3 = global.score; break;
    }
}

anchXhs = (global.xvstart * 2) + 150;
anchXs = (global.xvstart * 2) + (global.xview * 2) - 150;
anchY = 15;

draw_set_halign(fa_middle);
draw_set_color(score_col);
draw_set_font(font1S);
draw_text(anchXhs,anchY,"HiScore");
draw_set_color(c_white);
draw_set_font(font_numbers);

if !HSupdate
    {draw_text_colour(anchXhs,anchY +35,number_add_comma(round(hiscore)),c_ltgray,c_ltgray,c_gray,c_gray,1)}
else
    {draw_text_colour(anchXhs,anchY +35,number_add_comma(round(hiscore)),c_ltgray,c_ltgray,c_white,c_white,1)}

draw_set_color(score_col);
draw_set_font(font1S);
draw_text(anchXs,anchY,"Score");
draw_set_color(c_white);
draw_set_font(font_numbers);
draw_text_colour(anchXs,anchY +35,number_add_comma(round(global.score)),c_ltgray,c_ltgray,c_white,c_white,1);

//Draw Stats
draw_set_color(c_ltgray);
draw_set_font(font1);
draw_set_halign(fa_left);


// So lives doesn't show -1 on death
if global.life &gt;= 0{
    player = global.life;
}else{
    player = 0;
}

var mtx = 1050; // Mid text X "score" "power" etc
var mty = 500; // Starting Height
var mnx = 1064; // Numbers for above

draw_text(mtx,mty,"Player");
for(i = 0; i &lt; 8; i++){
    if i &lt; player{
        draw_sprite_ext(spr_gui_star, 0, mnx + (i*28), mty+40, 1, 1, 0, make_colour_rgb(150,50,50), 1);
    }else{
        draw_sprite_ext(spr_gui_star, 0, mnx + (i*28), mty+40, 1, 1, 0, make_colour_rgb(40,0,0), 1);
    }
}

//Bombs
mty += 80;
draw_text(mtx,mty,"Bombs");

for(i = 0; i &lt; 8; i++){
    if i &lt; global.bombs{
        draw_sprite_ext(spr_gui_star, 0, mnx + (i*28), mty+40, 1, 1, 0, make_colour_rgb(50,150,50), 1);
    }else{
        draw_sprite_ext(spr_gui_star, 0, mnx + (i*28), mty+40, 1, 1, 0, make_colour_rgb(0,40,0), 1);
    }
}

draw_set_font(font1);
//Power
mty += 80
var mp = global.max_power -1;
draw_text(mtx,mty,"Power");
draw_set_color(make_color_rgb(255,100,0));
if global.pow &gt; 1{
    var pbar = 220 * ((global.pow -1) /mp)
}else{
    var pbar = 0
}
draw_rectangle(mtx, mty + 30, mtx + pbar, mty + 50, false);
draw_set_color(c_ltgray);
draw_rectangle(mtx, mty + 30, mtx + 220, mty + 50, true);
for(i = 220/mp; i &lt; 220; i += 220/mp){
    draw_line(mtx + i, mty +30, mtx + i, mty +50);
}
//Graze
mty += 80
draw_set_color(c_ltgray);
draw_set_font(font1);
draw_text(mtx,mty,"Graze");
draw_set_color(c_white);
draw_set_font(font_numbers);
draw_text_colour(mnx -5,mty + 40,number_add_comma(string(round(global.graze))),c_ltgray,c_ltgray,c_white,c_white,1);
//Point items
mty += 80
draw_set_color(c_ltgray);
draw_set_font(font1);
draw_text(mtx,mty,"Point");
draw_set_color(c_white);
draw_set_font(font_numbers);
draw_text_colour(mnx -5,mty + 40,number_add_comma(string(global.point)),c_ltgray,c_ltgray,c_white,c_white,1);

//Draw Boss Position
if instance_exists(obj_boss_parent)
{
    draw_sprite(spr_bossbtm,0,(obj_boss_parent.x*2) + (global.xvstart*2),960);
}

//FPS
draw_set_color(c_white);
draw_set_font(font1S);
draw_set_halign(fa_right); 
draw_text(1270,940,string(fps) + " FPS");
draw_set_halign(fa_left); 


//Dev Mode
if global.debug==true
{
    var dbX = 20;
    var dbY = 600;
    draw_set_color(c_black);
    draw_set_alpha(0.75);
    draw_rectangle(dbX -10,dbY,dbX + 200,dbY + 260,false)
    dbY += 20;
    draw_set_color(c_white);
    draw_set_alpha(1);
    draw_set_font(font_debug);
    draw_text(dbX,dbY,"Debug:");
    dbY += 20;
    draw_text(dbX,dbY,"No. of objects: " + string(instance_count));
    dbY += 20;
    draw_text(dbX,dbY,"Time: " + string(global.seconds)); //Timer Display
    dbY += 20;
    draw_text(dbX,dbY,"Real FPS: " + string(fps_real)); //Max FPS CPU can do
    dbY += 20;
    draw_text(dbX,dbY,"Rank: " + string(global.rank)); //Rank
    dbY += 20;
    draw_text(dbX,dbY,"Multiplier: " + string(global.adjust)); //Global Multiplier for Difficulty
    dbY += 20;
    draw_text(dbX,dbY,"Frame: " + string(global.frame)); //Global Frame counter
    dbY += 20;
    if global.replay{
        var rplloool = "Yes";
    }else{
        var rplloool = "No";
    }
    draw_text(dbX,dbY,"In Replay: " + string(rplloool));
    dbY += 20;
    if global.god{
        var godlool = "Yes";
    }else{
        var godlool = "No";
    }
    draw_text(dbX,dbY,"God Mode: " + string(godlool));
    dbY += 20;
    draw_text(dbX,dbY,"Random Seed: " + string(random_get_seed()));
    dbY += 20;
    draw_text(dbX,dbY,"Player X: " + string(global.player_x));
    dbY += 20;
    draw_text(dbX,dbY,"Player Y: " + string(global.player_y));
}

draw_set_font(font1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interface Background
display_set_gui_size(1280,960);
draw_set_alpha(1);
draw_sprite(spr_interface1,0,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Boss HP Circle
with obj_boss_parent{
    if timer&gt;-60{
        var Chp = ceil(359/maxhp*hp)
        if hp&gt;0{
            d3d_transform_set_identity();
            d3d_transform_set_rotation_z(90);
            d3d_transform_add_translation(x,y,0);
             
            draw_primitive_begin(pr_trianglestrip);
            for (i=0; i &lt;= Chp; i++){
                draw_vertex_color(lengthdir_x(radius,i),lengthdir_y(radius,i),make_color_rgb(200,150,255),1);
                draw_vertex_color(lengthdir_x(radius+line,i),lengthdir_y(radius+line,i),make_color_rgb(255,255,255),1);
            }
            draw_primitive_end();
            d3d_transform_set_identity();
            
            draw_set_circle_precision(64);
            draw_set_alpha(0.75);
            draw_set_color(make_colour_rgb(255,100,100));
            draw_circle(x,y,radius,true);
            draw_circle(x,y,radius+line,true);
            draw_set_color(make_colour_rgb(150,150,255));
            draw_line(x,y-(radius),x,y-(radius+line+1));
            draw_set_alpha(1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
