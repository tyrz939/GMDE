<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var replayListLength = 25; // Number of save slots.
load = true; // Select Load (true) or Save (false).

var replayNumber, dateString, timeString, difficulty, character;
var o, p, l;
for (var i = 0; i &lt; replayListLength; i++) {
    p = string("\replay" + string(i+1) + ".rpl");
    if file_exists(working_directory + string(p)) {
        file = file_bin_open(working_directory + string(p), 0);
        difficulty = file_bin_read_byte(file); // Read Diffuclty
        switch difficulty{
            case 0: difficulty = "Easy"; break;
            case 1: difficulty = "Normal"; break;
            case 2: difficulty = "Hard"; break;
            case 3: difficulty = "Lunatic"; break;
        }
        character = file_bin_read_byte(file); // Read Character
        switch character{
            case 0: character = "Kaede"; break;
            case 1: character = "ReimuA"; break;
            case 2: character = "ReimuB"; break;
            case 3: character = "MarisaA"; break;
            case 4: character = "MarisaB"; break;
            case 5: character = "Yuuka"; break;
        }
        // Read Saved Date
        o = file_bin_read_byte(file);
        l = file_bin_read_byte(file);
        dateString = "";
        for(p = 0; p &lt; o; p++) {
            l = file_bin_read_byte(file);
            dateString = dateString + ansi_char(l);
        }
        // Read Saved Time
        timeString = "";
        o = file_bin_read_byte(file);
        l = file_bin_read_byte(file);
        for(p = 0; p &lt; o; p++) {
            l = file_bin_read_byte(file);
            timeString = timeString + ansi_char(l);
        }
        file_bin_close(file);
    } else {
        dateString = "__/__/____";
        timeString = "__:__";
        difficulty = "_______";
        character = "_______";
    }
    
    if i&lt;9 {
        replayNumber = string("No. 0" + string(i+1));
        } else {
            replayNumber = string("No. " + string(i+1));
        }
    menu[i] = replayNumber;
    date[i] = dateString;
    time[i] = timeString;
    rank[i] = difficulty;
    char[i] = character;
}

y = 100;
space = 32;
mpos = 0;

surf = noone;
c = noone;

if instance_exists(obj_game) {
    x = (global.xvstart *2) + 50;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>c = mpos;
var move = 0;
move -= max(input.up,0);
move += max(input.down,0);

if move != 0 {
    alpha = 1;
    audio_stop_sound(sfx_menu_move);
    audio_play_sound(sfx_menu_move,1,false);
    mpos += move;
    if mpos &lt; 0 {
        mpos = array_length_1d(menu) -1;
    }
    if mpos &gt; array_length_1d(menu) -1 {
        mpos = 0;
    }
}

if input.bomb_press {
    instance_destroy();
    if load == true {
        instance_activate_object(obj_menu);
        exit;
    } else {
        scr_save();
        room_goto(room_menu);
        global.pause = 0;
        global.reset = 0;
    }
    audio_stop_sound(sfx_menu_sel);
    audio_play_sound(sfx_menu_sel,1,false);
}

var push = 0;
push = max(input.shoot_press,0);
if push == 1 {
    audio_stop_sound(sfx_menu_sel);
    audio_play_sound(sfx_menu_sel,1,false);
    for (i = 0; i &lt; array_length_1d(menu); i++) {
        if mpos == i {
            p = string("\replay" + string(i+1) + ".rpl");
            if load == true &amp;&amp; file_exists(working_directory + string(p)) {
//                global.replay = true;
//                room_goto(room_ingame);
                global.rpl = string(p);
                instance_deactivate_object(self);
                instance_create(x,y,obj_replay_sel_stage);
            } else if load == false &amp;&amp; object_exists(obj_replay_recorder) {
                obj_replay_recorder.rpl = string(p);
                obj_replay_recorder.replay_save = true;
                instance_destroy();
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(1280,960);

// Surface updates only on change event
// to save drawing all the text every frame
if surface_exists(surf)
{
    surface_set_target(surf);
}
else
{
    surf = surface_create(1280,960);
    surface_set_target(surf);
    draw_clear_alpha(c_black,0);
    c = noone;
}

// Draw start
if c != mpos
{
    draw_set_halign(fa_left);
    draw_set_valign(fa_middle);
    draw_set_font(font_replay);
    var sel_col = c_orange;
    
    var m;
    for (m = 0; m &lt; array_length_1d(menu); m++)
    {
        //Menu Shadow
        draw_set_alpha(0.5);
        draw_set_colour(c_black);
        draw_text(x+2,y+2+(m*space),string(menu[m]))
        //Menu
        draw_set_alpha(1);
        draw_set_colour(c_gray);
        draw_text(x,y+(m*space),string(menu[m]))
        // Selection
        draw_set_colour(sel_col);
        
        if m==mpos
            {draw_text(x,y+(m*space),string(menu[m]))}
    }
    
    var hspace = 150;
    for (m = 0; m &lt; array_length_1d(date); m++)
    {
        //Menu Shadow
        draw_set_alpha(0.5);
        draw_set_colour(c_black);
        draw_text(x+hspace+2,y+2+(m*space),string(date[m]))
        //Menu
        draw_set_alpha(1);
        draw_set_colour(c_gray);
        draw_text(x+hspace,y+(m*space),string(date[m]))
        // Selection
        draw_set_colour(sel_col);
        
        if m==mpos
            {draw_text(x+hspace,y+(m*space),string(date[m]))}
    }
    
    hspace += 150;
    for (m = 0; m &lt; array_length_1d(time); m++)
    {
        //Menu Shadow
        draw_set_alpha(0.5);
        draw_set_colour(c_black);
        draw_text(x+hspace+2,y+2+(m*space),string(time[m]))
        //Menu
        draw_set_alpha(1);
        draw_set_colour(c_gray);
        draw_text(x+hspace,y+(m*space),string(time[m]))
        // Selection
        draw_set_colour(sel_col);
        
        if m==mpos
            {draw_text(x+hspace,y+(m*space),string(time[m]))}
    }
    
    hspace += 100;
    for (m = 0; m &lt; array_length_1d(char); m++)
    {
        //Menu Shadow
        draw_set_alpha(0.5);
        draw_set_colour(c_black);
        draw_text(x+hspace+2,y+2+(m*space),string(char[m]))
        //Menu
        draw_set_alpha(1);
        draw_set_colour(c_gray);
        draw_text(x+hspace,y+(m*space),string(char[m]))
        // Selection
        draw_set_colour(sel_col);
        
        if m==mpos
            {draw_text(x+hspace,y+(m*space),string(char[m]))}
    }
    
    hspace += 150;
    for (m = 0; m &lt; array_length_1d(rank); m++)
    {
        //Menu Shadow
        draw_set_alpha(0.5);
        draw_set_colour(c_black);
        draw_text(x+hspace+2,y+2+(m*space),string(rank[m]))
        //Menu
        draw_set_alpha(1);
        draw_set_colour(c_gray);
        draw_text(x+hspace,y+(m*space),string(rank[m]))
        // Selection
        draw_set_colour(sel_col);
        
        if m==mpos
            {draw_text(x+hspace,y+(m*space),string(rank[m]))}
    }
}
// Draw end

surface_reset_target();
if surface_exists(surf)
    {draw_surface(surf,0,0);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>10,10</point>
    <point>10,10</point>
  </PhysicsShapePoints>
</object>
