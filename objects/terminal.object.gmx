<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>line_count = 100;
curser = "_";
flash = 30;
flash_curser = 0;

for(var i = 0; i &lt; line_count; i++){
    line[i]  = "";
}

if keyboard_check_pressed(vk_enter){
    keyboard_string = "";
}

println(global.name + " v" + global.version);
println("-------------------------------------");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(192) &amp;&amp; (global.pause || global.term){
    global.term = !global.term;
    global.take_input = !global.term;
    keyboard_string = "";
}

if global.term{
    if keyboard_check_pressed(vk_enter){
        println(line[0]);
        /*
        String Logic, Turns commands that are
        seperated by spaces in to usable strings
        */
        var st = 1;
        var ed = 0;
        var p = 0;
        var chk = false;
        keyboard_string = string(keyboard_string + " ");
        for(var o = 0; o &lt; 10; o++){
            exec[o] = "";
        }
        for(var i = 1; i &lt;= string_length(keyboard_string); i++){
            if string_char_at(keyboard_string, i) == " " &amp;&amp; string_char_at(keyboard_string, i -1) != " "{
                chk = true;
            }
            if chk == true{
                chk = false;
                while string_char_at(keyboard_string, st) == " "{
                    st++;
                    ed--;
                }
                exec[p] = string_copy(keyboard_string, st, ed);
//                show_debug_message(exec[p]);
                p++;
                i++;
                st = i;
                ed = 0;
            }
            ed++;
        }
        // Run Commands
        var run = exec[0];
        if run != ""{
            if run == "exit" {game_end();}
            else if run == "set" {t_set(exec[1], exec[2]);}
            else if run == "inst" {t_inst(exec[1]);}
            else if run == "debug" {t_debug(exec[1]);}
            else if run == "clear" {t_clear();}
            else if run == "stage" {t_stage(exec[1]);}
            else if run == "ver" {println(global.name + " v" + global.version);}
            else {println("'" + run + "' command not found");}
        }
        keyboard_string = "";
    }
    
    line[0] = ":&gt; " + keyboard_string;
    
    // Flash Curser
    if flash_curser &lt; flash * 2{
        flash_curser++;
    }else{
        flash_curser = 0;
        curser = "_";
    }
    if flash_curser == flash{
        curser = "";
    }
}else{
    flash_curser = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.term{
    switch global.resolution{
        case 0:
            var w = 640; var h = 480; break;
        case 1:
            var w = 960; var h = 720; break;
        case 2:
            var w = 1280; var h = 960; break;
        default:
            var w = 640; var h = 480; break;
    }
    display_set_gui_size(w,h);
    // Background
    draw_set_color(c_black);
    draw_set_alpha(0.75);
    draw_rectangle(0, 0, w, max(h / 3, 400), false);
    
    // Text
    draw_set_halign(fa_left);
    draw_set_font(font_terminal);
    draw_set_alpha(1);
    draw_set_color(c_ltgray);
    
    var h = max(h / 3, 400) - 20;
    for(var i = 0; i &lt; line_count; i++){
        if i = 0{
            draw_text(5, h, string(line[i]) + string(curser));
        }else{
            draw_text(5, h, string(line[i]));
        }
        h -= 14;
        if h &lt; 0{
            i = line_count;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
